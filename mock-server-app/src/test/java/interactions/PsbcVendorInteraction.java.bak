package interactions;

import java.io.IOException;

/**
 * @author Ray.Xu
 * @classname PsbcVendorInteraction
 * @description TODO
 * @date 9/3/2020 4:26 PM
 */
public interface PsbcVendorInteraction {

    boolean isExistedInFtp(String fileName) throws IOException;

    boolean uploadFileToFtp(String reqFile, String nfsReqFile, String ftpReqPath);

    boolean downloadFileFromFtp(String resFile, String ftpResPath, String nfsResPath);

    void SendBatchSocket(Result<VendorBatchTransData> batchDataList,VendorBatchTransData vendorBatchTransData,
                         String batchFile, String msgInfo);


}


class RealImpl implements PsbcVendorInteraction {

    protected boolean isExistedInFtp(String fileName) throws IOException {
        FTPHelper.initFTPHelper(psbcServiceConfig.getFtpHostName(), psbcServiceConfig.getFtpPort(), psbcServiceConfig.getFtpUserName(), psbcServiceConfig.getFtpPassword(),true);
        return FTPHelper.existFile(fileName);
    }

    protected boolean uploadFileToFtp(String reqFile, String nfsReqFile, String ftpReqPath) {
        FTPHelper.initFTPHelper(psbcServiceConfig.getFtpHostName(), psbcServiceConfig.getFtpPort(), psbcServiceConfig.getFtpUserName(), psbcServiceConfig.getFtpPassword(),true);
        return FTPHelper.uploadFile(ftpReqPath, reqFile, nfsReqFile);
    }

    protected boolean downloadFileFromFtp(String resFile, String ftpResPath, String nfsResPath) {
        FileUtils.createDirectory(FileUtils.getPath(nfsResPath));
        FTPHelper.initFTPHelper(psbcServiceConfig.getFtpHostName(), psbcServiceConfig.getFtpPort(), psbcServiceConfig.getFtpUserName(), psbcServiceConfig.getFtpPassword(),true);
        return FTPHelper.downloadFile(ftpResPath, resFile, nfsResPath);
    }

    @Override
    public void SendBatchSocket(Result<VendorBatchTransData> batchDataList, VendorBatchTransData vendorBatchTransData, String batchFile, String msgInfo) {
        ActionResult<String> socketResult= MinaTcpClient.sendSyn(psbcServiceConfig.getSocketIp(), psbcServiceConfig.getSocketPort(), msgInfo, psbcServiceConfig.getSocketTimeout(), psbcServiceConfig.getBufferallocationSize(), psbcServiceConfig.getSocketTimeout(), psbcServiceConfig.getSocketEncoding());
    }
}

class FakeImpl implements PsbcVendorInteraction {

    @Override
    public boolean isExistedInFtp(String fileName) throws IOException {
        return false;
    }

    @Override
    public boolean uploadFileToFtp(String reqFile, String nfsReqFile, String ftpReqPath) {
        return false;
    }

    @Override
    public boolean downloadFileFromFtp(String resFile, String ftpResPath, String nfsResPath) {
        return false;
    }

    @Override
    public void SendBatchSocket(Result<VendorBatchTransData> batchDataList, VendorBatchTransData vendorBatchTransData, String batchFile, String msgInfo) {

    }
}
